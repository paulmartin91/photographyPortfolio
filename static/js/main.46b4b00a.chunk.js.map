{"version":3,"sources":["PhotosMain/BG1.jpg","PhotosMain/BG2.jpg","PhotosMain/BG3.jpg","PhotosMain/BG4.jpg","PhotosMain/BG5.jpg","PhotosMain/BG6.jpg","PhotosMain/BG7.jpg","PhotosMain/BG8.jpg","PhotosMain/BG9.jpg","PhotosMain/BG10.jpg","Photos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Photos","props","className","src","photo","App","handleClick","event","target","name","setState","prevState","albumOpen","document","getElementById","scrollLeft","albumFilter","innerHTML","state","photos","All","BG1","BG2","BG3","BG4","BG5","BG6","BG7","BG8","BG9","BG10","Jungle","Desert","England","Tundra","onClick","this","style","minWidth","map","x","y","delay","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,wLCS5BC,G,MANA,SAACC,GACZ,OACQ,yBAAKC,UAAU,YAAYC,IAAKF,EAAMG,U,mLCgHnCC,E,YArGb,WAAYJ,GAAO,IAAD,8BAChB,4CAAMA,KAORK,YAAc,SAACC,GACY,SAArBA,EAAMC,OAAOC,MACf,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BC,WAAYD,EAAUC,cAID,eAArBL,EAAMC,OAAOC,OACfI,SAASC,eAAe,eAAeC,WAAa,EACpD,EAAKL,SAAS,CACZM,YAAaT,EAAMC,OAAOS,cAhB9B,EAAKC,MAAQ,CACXN,WAAW,EACXI,YAAa,OAJC,E,sEAuBT,IAAD,OAEAG,EAAS,CACbC,IAAK,CAACC,IAAKC,IAAKC,IAAKC,IAAKC,IAAKC,IAAKC,IAAKC,IAAKC,IAAKC,KACnDC,OAAQ,CAACV,IAAKC,IAAKC,KACnBS,OAAQ,CAACR,IAAKC,KACdQ,QAAS,CAACP,IAAKC,IAAKC,KACpBM,OAAQ,CAACL,IAAKC,MAWhB,OACE,iCACE,yBAAK5B,UAAU,OACb,yBAAKA,UAAY,YACjB,yBAAKA,UAAU,QAAf,QACE,yBAAKA,UAAU,aACb,uBACEO,KAAO,QACPP,UAAU,qBACViC,QAASC,KAAK9B,aAHhB,UAMA,mCACEG,KAAO,MACPP,UAAU,YAFZ,YAGckC,KAAKlB,MAAMN,UAAa,aAAe,aAHrD,OAOA,mCACEH,KAAO,MACPP,UAAU,YAFZ,YAGckC,KAAKlB,MAAMN,UAAa,aAAe,aAHrD,SAOA,mCACEH,KAAO,MACPP,UAAU,YAFZ,YAGckC,KAAKlB,MAAMN,UAAa,aAAe,aAHrD,aASJ,yBAAKV,UAAU,YACfmC,MAAUD,KAAKlB,MAAMN,UAAa,CAAC0B,SAAU,SAAW,CAACA,SAAU,MAEjE,yBACApC,UAAU,SACVmC,MAAUD,KAAKlB,MAAMN,UAAa,CAAC0B,SAAU,SAAW,CAACA,SAAU,MAE/DF,KAAKlB,MAAMN,WAlDR,CACb,MACA,SACA,SACA,UACA,UA6C0C2B,KAAI,SAACC,EAAGC,GAAJ,OACnC,kBAAC,IAAD,CAAQC,MAAS,IAAFD,GACb,uBAAGvC,UAAU,qBAAqBO,KAAM,cAAc0B,QAAS,EAAK7B,aAClEkC,SAMX,yBAAKG,GAAG,cAAczC,UAAU,iBAC7BiB,EAAOiB,KAAKlB,MAAMF,aAAauB,KAAI,SAACC,EAAGC,GAAJ,OAAS,kBAAC,EAAD,CAAQrC,MAAOoC,c,GA9FtDI,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASvC,SAASC,eAAe,SD4H3C,kBAAmBuC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.46b4b00a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BG1.2c8cdfbc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/BG2.eb29f65c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/BG3.73754e7f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/BG4.ab11468b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/BG5.ac179aef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/BG6.440fdc36.jpg\";","module.exports = __webpack_public_path__ + \"static/media/BG7.0863ebd5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/BG8.b148c1ca.jpg\";","module.exports = __webpack_public_path__ + \"static/media/BG9.ab11468b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/BG10.fa2b3467.jpg\";","import React from 'react';\nimport './App.css';\n\nconst Photos = (props) => {\n    return (\n            <img className=\"photoMain\" src={props.photo} />\n    )\n}\n\nexport default Photos;","import React from 'react';\nimport Photos from './Photos'\nimport FadeIn from 'react-fade-in';\nimport './App.css';\nimport BG1 from './PhotosMain/BG1.jpg'\nimport BG2 from './PhotosMain/BG2.jpg'\nimport BG3 from './PhotosMain/BG3.jpg'\nimport BG4 from './PhotosMain/BG4.jpg'\nimport BG5 from './PhotosMain/BG5.jpg'\nimport BG6 from './PhotosMain/BG6.jpg'\nimport BG7 from './PhotosMain/BG7.jpg'\nimport BG8 from './PhotosMain/BG8.jpg'\nimport BG9 from './PhotosMain/BG9.jpg'\nimport BG10 from './PhotosMain/BG10.jpg'\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      albumOpen: false,\n      albumFilter: \"All\",\n    }\n  }\n\n  handleClick = (event) => {\n    if (event.target.name == \"album\") {\n      this.setState(prevState => ({\n        albumOpen: !prevState.albumOpen\n    }));\n    }\n\n    if (event.target.name == \"albumFilter\") {\n      document.getElementById('albumFilter').scrollLeft = 0;\n      this.setState({\n        albumFilter: event.target.innerHTML\n      })\n    }\n  }\n\n  render(){\n\n    const photos = {\n      All: [BG1, BG2, BG3, BG4, BG5, BG6, BG7, BG8, BG9, BG10],\n      Jungle: [BG1, BG2, BG3],\n      Desert: [BG4, BG5],\n      England: [BG6, BG7, BG8],\n      Tundra: [BG9, BG10]\n    }\n\n    const albums = [\n      \"All\",\n      \"Jungle\",\n      \"Desert\",\n      \"England\",\n      \"Tundra\"\n    ]\n\n    return(\n      <section>\n        <div className=\"app\">\n          <div className = \"mainMenu\">\n          <div className=\"logo\">LOGO</div>\n            <div className=\"menuItems\">\n              <a\n                name = \"album\"\n                className=\"menuItem menuHover\"\n                onClick={this.handleClick}>\n                  Albums\n              </a>\n              <a\n                name = \"Kit\"\n                className=\"menuItem\"\n                className={(this.state.albumOpen) ? \"unselected\" : \"menuHover\"} \n                >\n                  Kit\n              </a>\n              <a\n                name = \"Kit\"\n                className=\"menuItem\"\n                className={(this.state.albumOpen) ? \"unselected\" : \"menuHover\"} \n                >\n                  About\n              </a>\n              <a\n                name = \"Kit\"\n                className=\"menuItem\"\n                className={(this.state.albumOpen) ? \"unselected\" : \"menuHover\"} \n                >\n                  Contact\n              </a>\n            </div>\n          </div>\n          <div className=\"albumsBox\"\n          style = {(this.state.albumOpen) ? {minWidth: \"200px\"} : {minWidth: \"0\"}}\n          >\n            <div \n            className=\"albums\"\n            style = {(this.state.albumOpen) ? {minWidth: \"200px\"} : {minWidth: \"0\"}}\n            >\n              {(this.state.albumOpen) && albums.map((x, y)=>\n                 <FadeIn delay={y*200}>\n                   <a className=\"menuItem menuHover\" name =\"albumFilter\" onClick={this.handleClick}>\n                    {x}\n                   </a>\n                  </FadeIn>)\n                }\n            </div>\n           </div>\n          <div id=\"albumFilter\" className=\"photosMainBox\">\n            {photos[this.state.albumFilter].map((x, y)=> <Photos photo={x} />)}\n          </div>\n        </div>\n      </section>\n    )\n  } \n} \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}